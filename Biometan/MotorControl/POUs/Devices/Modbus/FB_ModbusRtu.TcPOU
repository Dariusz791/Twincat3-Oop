<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ModbusRtu" Id="{69d5e8b6-d242-4c8d-a42f-563324e4dbde}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModbusRtu

VAR
	
	MB           : ModbusRtuMaster_KL6x22B;
	_deviceID    : BYTE; // Slave Device Adress
	_MBdata      : ARRAY[0..40] OF WORD;		(* The size of this array can be adapted to the modbus slaves register area *)
	_timeoutvalue: TIME;		(* timeout while waiting for an answer of the modbus slave *)
	_command	 : WORD;	
 	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ATVCommand" Id="{dc357cda-b429-47ad-87f2-d3598731a580}">
      <Declaration><![CDATA[PROPERTY ATVCommand : WORD]]></Declaration>
      <Get Name="Get" Id="{10fe7980-354b-4371-99a5-b08603b9e636}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ATVCommand := _command;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b1987c15-a9dc-4dc2-99b8-2c4339fa489b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_command := ATVCommand;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="InverterOperation" Id="{7322a721-3988-4aa6-9617-d75b59e1e3e9}">
      <Declaration><![CDATA[METHOD InverterOperation : BOOL
VAR_INPUT
END_VAR


VAR_INST
	step      : INT:=0; //Init step
	busy 	  : BOOL;
	MdbStatus : MODBUS_ERRORS;
	status    : UINT;
	currHz	  : REAL;			
END_VAR


VAR
	error: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//ATV320 Inverter operation

CASE step OF
0: (*Initialize*)
	InverterOperation := FALSE;
	MB.ReadRegs(Execute:=FALSE);
	
	step := 10;
	
10: (*Read status of Inverter*)
	MB.ReadRegs(
		UnitID:=ModbusID,
		Quantity:= 1,
		MBAddr:=3201,
		cbLength:= 2,
		pMemoryAddr:= MBdata,
		Execute:= TRUE,
		Timeout:= TimeoutValue,
		Busy => busy	);
		
	IF NOT busy THEN
		MB.ReadRegs(Execute:=FALSE);
		MdbStatus := MB.ErrorId;		
		
		IF NOT MB.Error THEN
			status:=MBdata^[0];
		END_IF
		MBdata^[0]:=0;
	
		step :=20;
		
	END_IF
	

	
20: (*Reading the estimated motor frequency*)	
	
	MB.ReadRegs(
		UnitID:=ModbusID,
		Quantity:= 1,
		MBAddr:=3202,
		cbLength:= 2,
		pMemoryAddr:= MBdata,
		Execute:= TRUE,
		Timeout:= TimeoutValue,
		Busy => busy	);

	IF NOT busy THEN
		MB.ReadRegs(Execute:=FALSE);
		MdbStatus := MB.ErrorId;			
		IF NOT MB.Error THEN
			currHz := INT_TO_REAL(WORD_TO_INT(MBdata^[0]));
			currHz := currHz/10;
		END_IF

		MBdata^[0]:=0;
		step :=30;
		
	END_IF		

	

25: (*Set in Ready State before drive*)
	_MBdata[0] := 14; // Set Ready
	
	MB.ReadRegs(
		UnitID:=ModbusID,
		Quantity:= 1,
		MBAddr:=8501,
		cbLength:= 2,
		pMemoryAddr:= MBdata,
		Execute:= TRUE,
		Timeout:= TimeoutValue,
		Busy => busy	);
		

		IF NOT busy THEN
			MB.ReadRegs(Execute:=FALSE);
			step :=30;
		END_IF
	
	
	
30: (*Write Control Register*)
	_MBdata[0] := ATVCommand; // Set Command 
	
	MB.ReadRegs(
		UnitID:=ModbusID,
		Quantity:= 1,
		MBAddr:=8501,
		cbLength:= 2,
		pMemoryAddr:= MBdata,
		Execute:= TRUE,
		Timeout:= TimeoutValue,
		Busy => busy	);
		

		IF NOT busy THEN
			MB.ReadRegs(Execute:=FALSE);
			step :=40;
		END_IF
	
	
40: (*Write the set frequency*)

	_MBdata[0] := 200;
	
	MB.WriteSingleRegister(
				UnitID:=ModbusID,
				Quantity:=1,
				MBAddr:=8502,
				cbLength:= 2,
				pMemoryAddr:= MBdata,
				Execute:= TRUE,
				Timeout:= TimeoutValue,
				Busy => busy	);

	IF NOT busy THEN
		MB.ReadRegs(Execute:=FALSE);
		step :=50;
	END_IF		


50: (*Read actual error of Inverter*)
	
	MB.ReadRegs(
		UnitID:=ModbusID,
		Quantity:= 1,
		MBAddr:=7200,
		cbLength:= 2,
		pMemoryAddr:= MBdata,
		Execute:= TRUE,
		Timeout:= TimeoutValue,
		Busy => busy	);
		
	IF NOT busy THEN
		MB.ReadRegs(Execute:=FALSE);
		MdbStatus := MB.ErrorId;			
		IF NOT MB.Error THEN
			error := WORD_TO_INT(MBdata^[0]);
		END_IF

		MBdata^[0]:=0;
		step :=0;
		InverterOperation := TRUE;	

	END_IF
	
	
END_CASE







////Write frequency to AVT Register
//MB.WriteSingleRegister(
//	UnitID := ModbusID,
//	Quantity := MBquantity,
//	MBAddr := MBAdress,
//	cbLength := MBquantity*2,
//	pMemoryAddr := MBdata,
//	Execute := TRUE,
//	Timeout := TimeoutValue,
//	Busy => ,
//);


//WriteSingleRegister := FALSE;

//IF NOT Mb.BUSY THEN
//	IF mb.Error THEN
//		WriteSingleRegister := FALSE;
//	ELSE
//		WriteSingleRegister := TRUE;
//	END_IF
//	MB.WriteSingleRegister(Execute:= FALSE); //reset FB_ModbusRtuMaster_KL6x22B;
//END_IF

]]></ST>
      </Implementation>
    </Method>
    <Property Name="MBdata" Id="{531bda53-fc56-43cf-b68a-6ec3956ff1d9}">
      <Declaration><![CDATA[PROPERTY MBdata : POINTER TO ARRAY [0..40] OF WORD]]></Declaration>
      <Get Name="Get" Id="{34651e40-9942-4104-ae72-800ec00354bb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MBdata := ADR(_MBdata);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{852cea10-7605-48a2-b498-ace6dc3ec5cd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MBdata := MBdata^;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ModbusID" Id="{a4139f0b-5a1b-48da-b7ea-b6010050c3c5}">
      <Declaration><![CDATA[PROPERTY ModbusID : BYTE]]></Declaration>
      <Get Name="Get" Id="{0345bf64-8096-425f-be8f-a4c2e9f7e5d0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ModbusID := _deviceID;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{20348fd4-af98-46db-8592-54a7b992e71a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_deviceID := ModbusID;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="TimeoutValue" Id="{1d2d4778-f541-4932-be3d-efd5ee208ddd}">
      <Declaration><![CDATA[PROPERTY TimeoutValue : TIME]]></Declaration>
      <Get Name="Get" Id="{097b8b9d-d6e6-448e-9399-07ffb8ae7021}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TimeoutValue := _timeoutvalue;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{fd486f22-48c4-4f95-ab50-b174b25b6d27}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_timeoutvalue := TimeoutValue;
 ]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>