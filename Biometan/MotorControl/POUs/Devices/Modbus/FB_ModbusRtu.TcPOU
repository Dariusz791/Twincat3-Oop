<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ModbusRtu" Id="{69d5e8b6-d242-4c8d-a42f-563324e4dbde}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModbusRtu

VAR
	
	MB           : ModbusRtuMaster_KL6x22B;
	_deviceID    : BYTE; // Slave Device Adress
	_quantity    : WORD; // Quantity of registers to read from destiny
	_adress      : WORD; // Adress of Modbus data to read 
	_MBdata      : ARRAY[0..40] OF WORD;		(* The size of this array can be adapted to the modbus slaves register area *)
	_timeoutvalue: TIME;		(* timeout while waiting for an answer of the modbus slave *)
	_error		 : BOOL;  // IF TRUE was a failure
 	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="MBAdress" Id="{50c0951a-f22f-46e7-b935-f45c9332b4f0}">
      <Declaration><![CDATA[PROPERTY MBAdress : WORD]]></Declaration>
      <Get Name="Get" Id="{25df7df0-611b-4679-aa26-cf1d0d02d581}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MBAdress := _adress;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{67a2925e-6a88-4529-b358-d92a9d8e6e46}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_adress := MBAdress;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MBdata" Id="{531bda53-fc56-43cf-b68a-6ec3956ff1d9}">
      <Declaration><![CDATA[PROPERTY MBdata : POINTER TO ARRAY [0..40] OF WORD]]></Declaration>
      <Get Name="Get" Id="{34651e40-9942-4104-ae72-800ec00354bb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MBdata := ADR(_MBdata);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{852cea10-7605-48a2-b498-ace6dc3ec5cd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MBdata := MBdata^;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MBerror" Id="{cadb196d-1caf-4870-ac56-40ef6f43621e}">
      <Declaration><![CDATA[PROPERTY MBerror : BOOL]]></Declaration>
      <Get Name="Get" Id="{225e3a0b-e590-4c55-a9c9-c7db6daac514}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MBerror := _error;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MBquantity" Id="{c53ea12c-2648-4c0e-ad75-27c8df32459b}">
      <Declaration><![CDATA[PROPERTY MBquantity : WORD]]></Declaration>
      <Get Name="Get" Id="{984f00e6-15c8-4080-ad9b-344fd33fb7d1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b2fa42c5-e6df-49c3-9b26-e13410ce917b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ModbusID" Id="{a4139f0b-5a1b-48da-b7ea-b6010050c3c5}">
      <Declaration><![CDATA[PROPERTY ModbusID : BYTE]]></Declaration>
      <Get Name="Get" Id="{0345bf64-8096-425f-be8f-a4c2e9f7e5d0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ModbusID := _deviceID;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{20348fd4-af98-46db-8592-54a7b992e71a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_deviceID := ModbusID;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="TimeoutValue" Id="{1d2d4778-f541-4932-be3d-efd5ee208ddd}">
      <Declaration><![CDATA[PROPERTY TimeoutValue : TIME]]></Declaration>
      <Get Name="Get" Id="{097b8b9d-d6e6-448e-9399-07ffb8ae7021}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TimeoutValue := _timeoutvalue;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{fd486f22-48c4-4f95-ab50-b174b25b6d27}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_timeoutvalue := TimeoutValue;
 ]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="WriteSingleRegister" Id="{7322a721-3988-4aa6-9617-d75b59e1e3e9}">
      <Declaration><![CDATA[METHOD WriteSingleRegister : BOOL
VAR_INPUT
END_VAR


VAR_INST
	step : INT:=0;
	busy : BOOL;
	state : T_MaxString;
	//start : 	
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[//ATV320 Inverter write control register

CASE step OF
0: (*Initialize*)
	WriteSingleRegister := FALSE;
	MB.ReadRegs(Execute:=FALSE);
	MBdata^[0] := 15;
	step := 10;
	
10: (*Read status of Inverter*)
	MB.ReadRegs(
		UnitID:=ModbusID,
		Quantity:= 1,
		MBAddr:=3240,
		cbLength:= 2,
		pMemoryAddr:= MBdata,
		Execute:= TRUE,
		Timeout:= T#2S,
		Busy => busy	);
		
	IF NOT busy THEN
		IF MB.Error THEN
			state := 'error';
		ELSE
			state := 'odczytany state';
		END_IF
		MB.WriteRegs(Execute:= FALSE);
	
		step :=20;
		
	END_IF
	

	
20: (*Reading the current inverter settings*)	
	
	MB.ReadRegs(
		UnitID:=ModbusID,
		Quantity:= 1,
		MBAddr:=3202,
		cbLength:= 2,
		pMemoryAddr:= MBdata,
		Execute:= TRUE,
		Timeout:= T#2S,
		Busy => busy	);
		
	IF NOT busy THEN
		IF MB.Error THEN
			state := 'error';
		ELSE
			state := 'odczytana nastawa';
		END_IF
		MB.WriteRegs(Execute:= FALSE);
		
		step :=30;
	END_IF
	
	
	
30: (*Write Control Register*)
	//MBdata^ := 15;
	
	MB.ReadRegs(
		UnitID:=ModbusID,
		Quantity:= 1,
		MBAddr:=8501,
		cbLength:= 2,
		pMemoryAddr:= MBdata,
		Execute:= TRUE,
		Timeout:= T#2S,
		Busy => busy	);
		
	IF NOT busy THEN
		IF MB.Error THEN
			state := 'error';
		ELSE
			state := 'zapis rejestru kontrolnego';
		END_IF
		MB.WriteRegs(Execute:= FALSE);	
		
		step :=40;	
	END_IF
	

	
40: (*Write the set frequency*)

	MB.WriteSingleRegister(
				UnitID:=1,
				Quantity:=1,
				MBAddr:=8502,
				cbLength:= 2,
				pMemoryAddr:= MBdata,
				Execute:= TRUE,
				Timeout:= T#2S,
				Busy => busy	);

	IF NOT busy THEN
		IF MB.Error THEN
			state := 'error';
		ELSE
			state := 'zapis częstotliwości zadanej';
		END_IF
		MB.WriteRegs(Execute:= FALSE);		

		step := 50;
	END_IF	
	


50:
	
	MB.ReadRegs(
		UnitID:=ModbusID,
		Quantity:= 1,
		MBAddr:=3202,
		cbLength:= 2,
		pMemoryAddr:= MBdata,
		Execute:= TRUE,
		Timeout:= T#2S,
		Busy => busy	);
		
	IF NOT busy THEN
		IF MB.Error THEN
			state := 'error';
		ELSE
			state := 'odczytana nastawa';
		END_IF
		MB.WriteRegs(Execute:= FALSE);
		WriteSingleRegister := TRUE;		
	END_IF
	
	
END_CASE







////Write frequency to AVT Register
//MB.WriteSingleRegister(
//	UnitID := ModbusID,
//	Quantity := MBquantity,
//	MBAddr := MBAdress,
//	cbLength := MBquantity*2,
//	pMemoryAddr := MBdata,
//	Execute := TRUE,
//	Timeout := TimeoutValue,
//	Busy => ,
//);


//WriteSingleRegister := FALSE;

//IF NOT Mb.BUSY THEN
//	IF mb.Error THEN
//		WriteSingleRegister := FALSE;
//	ELSE
//		WriteSingleRegister := TRUE;
//	END_IF
//	MB.WriteSingleRegister(Execute:= FALSE); //reset FB_ModbusRtuMaster_KL6x22B;
//END_IF

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>