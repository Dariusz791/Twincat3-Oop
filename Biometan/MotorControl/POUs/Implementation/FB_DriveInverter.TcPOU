<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_DriveInverter" Id="{3b50846e-6152-4329-9a31-34ca455c4ec3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DriveInverter EXTENDS FB_DriveReverse IMPLEMENTS I_DriveInverter;
VAR
	_stInverter : ST_Inverter;
			
END_VAR

VAR_STAT
	_nInstances		: INT;		// Counter of created Instances
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[


 
]]></ST>
    </Implementation>
    <Property Name="DeviceData" Id="{3e807e5e-639e-4fa9-8d07-f9104c80c7b0}">
      <Declaration><![CDATA[PROPERTY DeviceData : ST_Inverter]]></Declaration>
      <Get Name="Get" Id="{af55e23d-2c03-48d1-be07-ab42e8eb159a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Dane pobierane podczas obsługi Invertera przez ModbusRtu
DeviceData := _stInverter;

]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{1bba7759-0bbf-4200-babf-6cf765552527}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Dane ustawiane podczas obsługi Invertera przez ModbusRtu
_stInverter := DeviceData;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_init" Id="{6d280acc-97e0-46f6-b62b-83d083551f4d}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	bDeviceId		 : BYTE;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^._stInverter.bDeviceID := bDeviceID;

//count of FB Instances and setting int Array of Interface variables. Assign an object to an interface variable
// The array of interface variable must be global
_nInstances := _nInstances + 1;
Itf.aItfDriveInverter[_nInstances] := THIS^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="InstanceCounter" Id="{f4d36832-326f-4423-aa7e-3d50b61c3b37}">
      <Declaration><![CDATA[PROPERTY InstanceCounter : INT]]></Declaration>
      <Get Name="Get" Id="{2101744b-ceb3-42e7-aebf-174bb4d76333}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InstanceCounter := _nInstances;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{64b64920-6b0e-4b95-82d2-e242fdbecf20}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Set reset Command
THIS^._eCommand := eResetInv;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSpeed" Id="{ffbd82cf-721f-4d5f-82e9-2001d00f4e60}">
      <Declaration><![CDATA[METHOD SetSpeed : BOOL
VAR_INPUT
	_speed	: REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Conversion speed to Inverter register Word 
THIS^._stInverter.rSpeed := REAL_TO_WORD(_speed * 10);]]></ST>
      </Implementation>
    </Method>
    <Method Name="StatusState" Id="{b2fd76c3-f710-4a43-a23d-38a510ede9d2}">
      <Declaration><![CDATA[METHOD StatusState :  E_StateDevice
VAR_INPUT
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Override 

// State Machine of the Drive 


CASE _eStateMachine OF
	
	eOff:
		WorkCounterOff();
		_supplyLed.State := FALSE;
		_stateLabel.Text := 'OFF';
		_statusLabel.Text := 'Napęd jest wyłączony';
		
		// Jesli falownik jest zasilony przejdz do stanu napęd w gotowości eOn
		IF _eCommand = eReady AND _termFuse.IsActive THEN
			_stInverter.eControl := eFaultReset;
			
			IF _stInverter.wStatus <> eFaultDrive AND _stInverter.wStatus <> eFaultAfterOperation THEN
				IF _stInverter.wStatus = eSwitchOnDisabled THEN
					_stInverter.eControl := eShutDown;
					
				END_IF
				
				IF _stInverter.wStatus = eReadyToSwitchOn THEN
					_stInverter.eControl := eSwitchOn;
					_eStateMachine := eOn;
				END_IF
	

			END_IF	
		END_IF
		
		
	
	eOn:
		WorkCounterOff();
		_supplyLed.State := TRUE;
		_stateLabel.Text := 'ON';
		_statusLabel.Text := 'Napęd jest w gotowości';

		// Uruchomienie napędu i przejscie do stanu eForward po potwierdzeniu slowa statusu eOperationEnabled
		IF _eCommand = eFwd THEN
			_stInverter.eControl := eEnableOperation;
			IF  _stInverter.wStatus = eOperationEnabled THEN
				_eStateMachine := eForward;
			END_IF
		// Uruchomienie napędu i przejscie do stanu eForward po potwierdzeniu slowa statusu eOperationEnabled
		ELSIF _eCommand = eRev THEN
			_stInverter.eControl := eReverseOperation;
			IF _stInverter.wStatus = eOperationEnabled THEN
				_eStateMachine := eReverse;
			END_IF
		END_IF 
		
        IF NOT _termFuse.IsActive THEN
			_eStateMachine := eOff;
		END_IF
		
		//Obsługa sytuacji blędu Modbusa przejdz do stanu eFault		
		IF _stInverter.errorMdb <> 0 THEN
 			_eStateMachine := eFault;
		END_IF
 
	
	eForward:
		_stateLabel.Text := 'RUNNING';
		_statusLabel.Text := 'Napęd jest uruchomiony do przodu';	
		WorkCounterOn();
		WorkCount();
		WorkTimelabel();	
		
		//Zatrzymaj napęd i przejdź do stanu gotowości eOn 
		IF _eCommand = eReady THEN 
			_stInverter.eControl := eSwitchOn;
			IF _stInverter.wStatus = eSwitchedOn THEN
				_eStateMachine := eOn;
			END_IF
		END_IF
		
		//Obsługa sytuacji zadziałania wyłacznika silnikowego przejdz do stanu eFault
        IF _eCommand = eFwd AND NOT _termFuse.IsActive THEN
			_eStateMachine := eFault;
		END_IF
		
		//Informacja o blędzie falownika 
		IF _stInverter.errorInv <> 0 THEN
			_statusLabel.Text := CONCAT('Błąd falownika nr:', WORD_TO_STRING(_stInverter.errorInv));
			_statusLabel.Text := CONCAT(_statuslabel.Text, _stInverter.sErrorDescription);
		END_IF
		
		//Obsługa sytuacji blędu Modbusa przejdz do stanu eFault
		IF _stInverter.errorMdb <> 0 THEN
 			_eStateMachine := eFault;
		END_IF
		
		//Jesli w Word Status Invertera jest status fault przejdz do stanu fault i zatrzymaj napęd
		IF _stInverter.wStatus = eFaultDrive OR _stInverter.wStatus =eFaultAfterOperation THEN
			_eStateMachine := eFault;
		END_IF
		
		
		
	eReverse:
		_stateLabel.Text := 'RUNNING';
		_statusLabel.Text := 'Napęd jest uruchomiony do tyłu';	
		WorkCounterOn();
		WorkCount();
		WorkTimelabel();
		IF _eCommand = eReady THEN
			_stInverter.eControl := eSwitchOn;
			IF _stInverter.wStatus = eSwitchedOn THEN
				_eStateMachine := eOn;
			END_IF
		END_IF
		
        IF _eCommand = eRev AND NOT _termFuse.IsActive THEN
			_eStateMachine := eFault;
		END_IF	
	 
		IF _stInverter.errorInv <> 0 THEN
			_statusLabel.Text := CONCAT('Błąd falownika nr:', WORD_TO_STRING(_stInverter.errorInv));
			_statusLabel.Text := CONCAT(_statuslabel.Text, _stInverter.sErrorDescription);
		END_IF
		
		IF _stInverter.errorMdb <> 0 THEN
 			_eStateMachine := eFault;
		END_IF
	

		IF _stInverter.wStatus = eFaultDrive OR _stInverter.wStatus =eFaultAfterOperation THEN
			_eStateMachine := eFault;
		END_IF
		
		
	eFault:
		//_stInverter.eControl := eSwitchOn;
		WorkCounterOff();
		_stateLabel.Text := 'FAULT';
		
		//wystąpił błąd falownika lub zadziałał wyłacznik silnikowy
		IF _termFuse.IsActive AND _stInverter.errorInv <> 0 THEN
			_statusLabel.Text := CONCAT('Błąd falownika nr:', WORD_TO_STRING(_stInverter.errorInv));
			_statusLabel.Text := CONCAT(_statuslabel.Text, _stInverter.sErrorDescription);
		ELSIF NOT _termFuse.IsActive THEN
			_statusLabel.Text := 'Zadziałał wyłacznik silnikowy';
		END_IF
		
		//wystąpił błąd Modbusa
		IF _stInverter.errorMdb <> 0 THEN
			_statusLabel.Text := CONCAT('Błąd sieci Modbus ', WORD_TO_STRING(_stInverter.errorMdb));
		END_IF		
		
		//wyłaczone zasilanie falownika przejdz do stanu eOff napęd wyłaczony
		IF _eCommand = eReady AND NOT _termFuse.IsActive THEN
			_eStateMachine := eOff;
		END_IF
			
		//wciśniety przycisk reset skasuj błąd falownika jesli się powiedzie przejdz do stanu eOff napęd wyłączony
		IF _eCommand = eResetInv THEN
			_stInverter.eControl := eFaultReset;
			IF  _stInverter.wStatus = eSwitchOnDisabled THEN 
				_statusLabel.Text := 'Bład falownika skasowany';
				_eStateMachine := eOff;
			END_IF
		END_IF

END_CASE











]]></ST>
      </Implementation>
    </Method>
    <Method Name="SwitchOff" Id="{2f65f00a-f656-42e9-8005-44be524860e7}">
      <Declaration><![CDATA[METHOD SwitchOff : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Override  send "stop" command to modbus block
THIS^._eCommand := eReady;	







]]></ST>
      </Implementation>
    </Method>
    <Method Name="SwitchOn" Id="{76402309-67ef-4b97-8c86-4d742fe7270a}">
      <Declaration><![CDATA[METHOD SwitchOn : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Override  send "start" command to Modbus block
THIS^._eCommand := eFwd;




]]></ST>
      </Implementation>
    </Method>
    <Method Name="SwitchReverseOff" Id="{e2abbc87-bf0f-449b-b617-af2f148cc1f4}">
      <Declaration><![CDATA[METHOD SwitchReverseOff : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Override  send "reverse" stop command to Modbus block
THIS^._eCommand := eReady;	


]]></ST>
      </Implementation>
    </Method>
    <Method Name="SwitchReverseOn" Id="{fa8df555-f63f-4670-adb2-e7de773a03c4}">
      <Declaration><![CDATA[METHOD SwitchReverseOn : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Override  send "reverse" start command to Modbus block
THIS^._eCommand := eRev;


]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>